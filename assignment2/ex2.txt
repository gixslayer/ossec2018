2a)

The script was tested on lilo and Kali (VirtualBox), where it worked correctly.


victim.c compiled with: gcc -o victim -g -fno-stack-protector -std=c99 victim.c

2b)

jump to gadget: correct
correct rdi address: correct (points to '/bin/ls')
jump to system: correct
correct syscall: 0x38=56 (sys_clone) -> correct

follows by calling execve("/bin/sh", {"sh", "-c", "", NULL}, {ENV...,NULL}) in child


256 buffer version calls: execve("/bin/sh", {"sh", "-c", "/bin/ls", NULL}, {ENV...,NULL})

So the command to execute is lost, which explains why the attack no longer works.

2c)

the string "/bin/sh" is inside libc itself, so if ASLR isn't a problem then an
address/offset inside libc can be given, rather than having to provide this
string in the overflown buffer and providing an address to the buffer.

2d)

The script also contains a comment line which can be used to provide an address
to /bin/sh in libc.so.6, rather than having to store this in the overflown
buffer itself and then having to pass the address of this stack buffer.
